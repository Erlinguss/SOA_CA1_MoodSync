@page "/"
@inject IJSRuntime JSRuntime
@using MoodSync.Enums
@using MoodSync.Interfaces
@using MoodSync.Models
@using MoodSync.Services
@using Newtonsoft.Json
@inject IWeatherService WeatherService
@inject ILocationService LocationService
@inject IGeoCodingService GeoCodingService
@inject RecommendationService RecommendationService

<section class="hero-section">
    <h1>Personalized Recommendations</h1>
    <p>Select your mood and location to get personalized recommendations based on the weather and nearby places.</p>
</section>

<section class="input-section">
    <label for="mood">How are you feeling today?</label>
    <select id="mood" @bind="selectedMood" class="dropdown">
        <option value="Happy">Happy</option>
        <option value="Sad">Sad</option>
        <option value="Stressed">Stressed</option>
        <option value="Relaxed">Relaxed</option>
        <option value="Angry">Angry</option>
    </select>

    <label for="location">Enter your location:</label>
    <input id="location" @bind="location" placeholder="Enter a city or town" class="input-box" />
</section>

<section class="button-section">
    <button @onclick="GetRecommendations" class="primary-btn">Get Recommendations</button>
    <button @onclick="ViewHistory" class="primary-btn secondary-btn">View History</button>
</section>

@if (weatherData != null)
{
    <section class="weather-section">
        <h3>Weather in @location</h3>
        <p>Temperature: @weatherData.Main.Temperature °C</p>
        <p>Description: @weatherData.Weather[0].Description</p>
    </section>
}

@if (recommendations != null)
{
    <section class="recommendations-section">
        <h3>Recommendations for you:</h3>
        <ul class="recommendation-list">
            @foreach (var recommendation in recommendations)
            {
                <li>@recommendation</li>
            }
        </ul>
    </section>
}

@if (recommendationHistory != null)
{
    <section class="history-section">
        <h3>Recommendation History</h3>
        <ul class="history-list">
            @foreach (var entry in recommendationHistory)
            {
                <li>
                    <strong>Mood:</strong> @entry.Mood,
                    <strong>Location:</strong> @entry.Location,
                    <strong>Time:</strong> @entry.Timestamp.ToString("yyyy-MM-ddTHH:mm:ss"),
                    <strong>Recommendations:</strong> @string.Join(", ", entry.Recommendations)
                </li>
            }
        </ul>
    </section>
}

<div id="map" class="map-container"></div>

@code {
    private Mood? selectedMood = null;
    private string location = "";
    private List<string> recommendations;
    private WeatherData weatherData;
    private List<MoodData> recommendationHistory;

    private async Task GetRecommendations()
    {
        if (selectedMood != null && !string.IsNullOrEmpty(location))
        {
            recommendations = await RecommendationService.GetRecommendationsAsync(location, (Mood)selectedMood);
            weatherData = await WeatherService.GetWeatherAsync(location);

            var moodData = new MoodData
                {
                    Mood = selectedMood.ToString(),
                    Location = location,
                    Recommendations = recommendations,
                    Timestamp = DateTime.Now
                };
            await SaveToFile(moodData);

            var geoData = await GeoCodingService.GetCoordinatesAsync(location);
            if (geoData != null && geoData.Results.Count > 0)
            {
                var latitude = geoData.Results[0].Geometry.Location.Latitude;
                var longitude = geoData.Results[0].Geometry.Location.Longitude;

                await JSRuntime.InvokeVoidAsync("setMapLocation", latitude, longitude);
            }
        }
    }

    private async Task SaveToFile(MoodData moodData)
    {
        var fileName = "moodData.json";
        var filePath = Path.Combine(Environment.CurrentDirectory, fileName);

        List<MoodData> historyList;

        if (File.Exists(filePath))
        {
            var jsonData = await File.ReadAllTextAsync(filePath);
            historyList = JsonConvert.DeserializeObject<List<MoodData>>(jsonData) ?? new List<MoodData>();
        }
        else
        {
            historyList = new List<MoodData>();
        }

        historyList.Add(moodData);
        var updatedData = JsonConvert.SerializeObject(historyList, Formatting.Indented);
        await File.WriteAllTextAsync(filePath, updatedData);
    }

    private async Task ViewHistory()
    {
        var fileName = "moodData.json";
        var filePath = Path.Combine(Environment.CurrentDirectory, fileName);

        if (File.Exists(filePath))
        {
            var jsonData = await File.ReadAllTextAsync(filePath);
            recommendationHistory = JsonConvert.DeserializeObject<List<MoodData>>(jsonData);
        }
    }
}


