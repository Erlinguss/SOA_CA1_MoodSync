@* @page "/"

<PageTitle>Home</PageTitle>

@using MoodSync.Enums
@using MoodSync.Interfaces
@using MoodSync.Models
@using MoodSync.Services
@inject IWeatherService WeatherService
@inject ILocationService LocationService
@inject IGeoCodingService GeoCodingService
@inject RecommendationService RecommendationService

<h1>Personalized Recommendations</h1>

<p>How are you feeling today?</p>
<select @bind="selectedMood">
    <option value="Happy">Happy</option>
    <option value="Sad">Sad</option>
    <option value="Stressed">Stressed</option>
    <option value="Relaxed">Relaxed</option>
    <option value="Angry">Angry</option>
</select>


<p>Enter your location:</p>
<input @bind="location" placeholder="Enter a city or town" />


<button @onclick="GetRecommendations" disabled="@(string.IsNullOrEmpty(location) || selectedMood == null)">Get Recommendations</button>


@if (weatherData != null)
{
    <h3>Weather in @location:</h3>
    <p>Temperature: @weatherData.Main.Temperature °C</p>
    <p>Description: @weatherData.Weather[0].Description</p>
}

@if (recommendations != null)
{
    <h3>Recommendations for you:</h3>
    <ul>
        @foreach (var recommendation in recommendations)
        {
            <li>@recommendation</li>
        }
    </ul>
}
<div id="map" style="width: 100%; height: 400px;"></div>


@code {
    private Mood? selectedMood = null;
    private string location = "";
    private List<string> recommendations;
    private WeatherData weatherData;

    private async Task GetRecommendations()
    {
        if (selectedMood != null && !string.IsNullOrEmpty(location))
        {
            recommendations = await RecommendationService.GetRecommendationsAsync(location, (Mood)selectedMood);
            weatherData = await WeatherService.GetWeatherAsync(location);
        }
    }
}
 *@

 @page "/"
@inject IJSRuntime JSRuntime
@using MoodSync.Enums
@using MoodSync.Interfaces
@using MoodSync.Models
@using MoodSync.Services
@inject IWeatherService WeatherService
@inject ILocationService LocationService
@inject IGeoCodingService GeoCodingService
@inject RecommendationService RecommendationService

<h1>Personalized Recommendations</h1>

<p>How are you feeling today?</p>
<select @bind="selectedMood">
    <option value="Happy">Happy</option>
    <option value="Sad">Sad</option>
    <option value="Stressed">Stressed</option>
    <option value="Relaxed">Relaxed</option>
    <option value="Angry">Angry</option>
</select>

<p>Enter your location:</p>
<input @bind="location" placeholder="Enter a city or town" />

<button @onclick="GetRecommendations">Get Recommendations</button>

@if (weatherData != null)
{
    <h3>Weather in @location:</h3>
    <p>Temperature: @weatherData.Main.Temperature °C</p>
    <p>Description: @weatherData.Weather[0].Description</p>
}

@if (recommendations != null)
{
    <h3>Recommendations for you:</h3>
    <ul>
        @foreach (var recommendation in recommendations)
        {
            <li>@recommendation</li>
        }
    </ul>
}

<div id="map" style="height: 400px; width: 100%;"></div>

@code {
    private Mood? selectedMood = null;
    private string location = "";
    private List<string> recommendations;
    private WeatherData weatherData;

    private async Task GetRecommendations()
    {
        if (selectedMood != null && !string.IsNullOrEmpty(location))
        {
            recommendations = await RecommendationService.GetRecommendationsAsync(location, (Mood)selectedMood);
            weatherData = await WeatherService.GetWeatherAsync(location);

            var geoData = await GeoCodingService.GetCoordinatesAsync(location);
            if (geoData != null && geoData.Results.Count > 0)
            {
                var latitude = geoData.Results[0].Geometry.Location.Latitude;
                var longitude = geoData.Results[0].Geometry.Location.Longitude;

                await JSRuntime.InvokeVoidAsync("setMapLocation", latitude, longitude);
            }
        }
    }
}
