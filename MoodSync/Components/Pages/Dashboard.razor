@page "/dashboard"
@inject IJSRuntime JSRuntime
@using MoodSync.Components.Layout
@using MoodSync.Enums
@using MoodSync.Interfaces
@using MoodSync.Models
@using MoodSync.Services
@using Newtonsoft.Json
@inject IWeatherService WeatherService
@inject ILocationService LocationService
@inject IGeoCodingService GeoCodingService
@inject RecommendationService RecommendationService
@inject LoginStateService LoginStateService
@inject NavigationManager NavigationManager
@layout MainLayout

<header>
    <div class="logo-container">
        <img src="Photos/MoodLogo.png" alt="Mood Sync Logo" class="logo-small" />
    </div>
    <div class="link-container">
        <a href="#" class="nav-link" @onclick="ViewHistory" @onclick:preventDefault>View History</a>
        <a href="/logout" class="nav-link" @onclick="Logout">Log Out</a>
    </div>
</header>

<section class="input-section">
    <div class="input-container">
        <label for="mood">How are you feeling today?</label>
        <select id="mood" @bind="selectedMood" class="dropdown">
            <option value="Happy">Happy</option>
            <option value="Sad">Sad</option>
            <option value="Stressed">Stressed</option>
            <option value="Relaxed">Relaxed</option>
            <option value="Angry">Angry</option>
        </select>
    </div>

    <div class="input-container">
        <label for="location">Enter your location</label>
        <input id="location" @bind="location" placeholder="Enter a city or town" class="input-box" />
    </div>
    <div class="button-section">
        <button @onclick="GetRecommendations" class="primary-btn">Get Recommendations</button>
    </div>
</section>

@if (weatherData != null)
{
    <section class="weather-section">
        <div class="weather-background">
            <img src="Photos/sky.jpg" alt="sky" />
            <div class="weather-details">
                <h3>Weather in @weatherData.City, @weatherData.Sys.Country</h3>
                <div class="weather-info-grid">
                    <div class="weather-box">
                        <p>🌡️ Current Temperature</p>
                        <span>@weatherData.Main.Temperature °C</span>
                    </div>
                    <div class="weather-box">
                        <p>Feels Like</p>
                        <span>@weatherData.Main.FeelsLike °C</span>
                    </div>
                    <div class="weather-box">
                        <p>Max Temperature</p>
                        <span>@weatherData.Main.TempMax °C</span>
                    </div>
                    <div class="weather-box">
                        <img src="Photos/sun.png" alt="sky" />
                    </div>
                    <div class="weather-box">
                        <p>Min Temperature</p>
                        <span>@weatherData.Main.TempMin °C</span>
                    </div>
                    <div class="weather-box">
                        <p>Humidity</p>
                        <span>@weatherData.Main.Humidity %</span>
                    </div>
                    <div class="weather-box">
                        <p>Wind Speed</p>
                        <span>@weatherData.Wind.Speed m/s</span>
                    </div>
                    <div class="weather-box">
                        <p>🌤️ Status</p>
                        <span>@weatherData.Weather[0].Description</span>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@if (recommendations != null)
{
    <section class="recommendations-section">
        <h3>Recommendations for you:</h3>
        <div class="recommendation-cards-container">
            @foreach (var recommendation in recommendations)
            {
                <div class="recommendation-card">
                    <h4>@recommendation</h4>
                </div>
            }
        </div>
    </section>
}


<div id="map" class="map-container"></div>

@if (recommendationHistory != null)
{
    <section class="history-section">
        <h3>Recommendation History</h3>
        <div class="history-cards-container">
            @foreach (var entry in recommendationHistory)
            {
                <div class="history-card">
                    <div class="history-card-header">
                        <span class="mood">@entry.Mood</span>
                        <span class="location">@entry.Location</span>
                        <span class="timestamp">@entry.Timestamp.ToString("yyyy-MM-dd HH:mm")</span>
                    </div>
                    <div class="history-card-body">
                        <h4>Recommendations:</h4>
                        <ul class="recommendations-list">
                            @foreach (var recommendation in entry.Recommendations)
                            {
                                <li>@recommendation</li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </section>
}

 
@code {
    private Mood? selectedMood = null;
    private string location = "";
    private List<string> recommendations;
    private WeatherData weatherData;
    private List<MoodData> recommendationHistory;

    protected override async Task OnInitializedAsync()
    {
        LoginStateService.OnChange += StateHasChanged;
        await base.OnInitializedAsync();
    }

 private async Task GetRecommendations()
{
    if (selectedMood != null && !string.IsNullOrEmpty(location))
    {
        recommendations = await RecommendationService.GetRecommendationsAsync(location, (Mood)selectedMood);
        weatherData = await WeatherService.GetWeatherAsync(location);

        var moodData = new MoodData
        {
            Mood = selectedMood.ToString(),
            Location = location,
            Recommendations = recommendations,
            Timestamp = DateTime.Now
        };
        await SaveToFile(moodData);

        var geoData = await GeoCodingService.GetCoordinatesAsync(location);
        if (geoData != null && geoData.Results.Count > 0)
        {
            var latitude = geoData.Results[0].Geometry.Location.Latitude;
            var longitude = geoData.Results[0].Geometry.Location.Longitude;

            var nearbyPlacesData = await LocationService.GetNearbyPlacesAsync(latitude, longitude);

            var filteredPlaces = RecommendationService.FilterPlacesByMood(nearbyPlacesData, (Mood)selectedMood);

            var placesJson = nearbyPlacesData.Results
                .Where(place => filteredPlaces.Contains($"{place.Name} - {place.Vicinity}"))
                .Select(place => new
                {
                    name = place.Name,
                    vicinity = place.Vicinity,
                    geometry = new
                    {
                        location = new
                        {
                            lat = place.Geometry.Location.Latitude,
                            lng = place.Geometry.Location.Longitude
                        }
                    },
                    photos = place.Photos != null && place.Photos.Count > 0
                        ? place.Photos.Select(photo => new { photo_reference = photo.PhotoReference }).ToList()
                        : null
                }).ToList();

            await JSRuntime.InvokeVoidAsync("setMapLocation", latitude, longitude, placesJson);
        }
        StateHasChanged();
    }
}

    private async Task SaveToFile(MoodData moodData)
    {
        var fileName = "moodData.json";
        var filePath = Path.Combine(Environment.CurrentDirectory, fileName);

        List<MoodData> historyList;

        if (File.Exists(filePath))
        {
            var jsonData = await File.ReadAllTextAsync(filePath);
            historyList = JsonConvert.DeserializeObject<List<MoodData>>(jsonData) ?? new List<MoodData>();
        }
        else
        {
            historyList = new List<MoodData>();
        }

        historyList.Add(moodData);
        var updatedData = JsonConvert.SerializeObject(historyList, Formatting.Indented);
        await File.WriteAllTextAsync(filePath, updatedData);
    }

    private async Task ViewHistory()
    {
        var fileName = "moodData.json";
        var filePath = Path.Combine(Environment.CurrentDirectory, fileName);

        if (File.Exists(filePath))
        {
            var jsonData = await File.ReadAllTextAsync(filePath);
            recommendationHistory = JsonConvert.DeserializeObject<List<MoodData>>(jsonData);
        }
    }

    public void Dispose()
    {
        LoginStateService.OnChange -= StateHasChanged;
    }

    private async Task Logout()
    {
        LoginStateService.Logout();
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isLoggedIn");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
        NavigationManager.NavigateTo("/");
        StateHasChanged();
    }
}